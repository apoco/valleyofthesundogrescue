@using System.Text.RegularExpressions;
@using VOTSDR.Utils;
@model System.String
         
@{
  var content = Model.Replace("\r\n", "\n");
  var urlFormat = new Regex(@"(^|\s)(https?://.*?)($|\s)");
}

@foreach (var paraContent in content
  .Split(new[] { "\n\n" }, StringSplitOptions.RemoveEmptyEntries))
{
  <p>
    @{
      var i = 0;
      var allLines = paraContent.Split('\n');
    }
    @foreach (var line in allLines)
	  {
          string toOutput = HttpUtility.HtmlEncode(line);
          if (toOutput.StartsWith("****"))
          {
              toOutput = "<h4>" + toOutput.Substring(3) + "</h4>";
          }
          else   if (toOutput.StartsWith("***"))
          {
              toOutput = "<h3>" + toOutput.Substring(3) + "</h3>";
          }
          else if (toOutput.StartsWith("**"))
          {
              toOutput = "<h2>" + toOutput.Substring(2) + "</h2>";
          }
          else if (toOutput.StartsWith("*"))
          {
              toOutput = "<h1>" + toOutput.Substring(1) + "</h1>";
          }
          else
          {
              toOutput = urlFormat.Replace(
                  toOutput,
                  new MatchEvaluator(
                    m =>
                    {
                        var url = m.Groups[2].Value.Trim();
                        var puncToPreserve = string.Empty;
                        while (url.EndsWith("?") || url.EndsWith(".") || url.EndsWith("!"))
                        {
                            puncToPreserve = url.Last() + puncToPreserve;
                            url = url.Substring(0, url.Length - 1);
                        }
                        return string.Format(
                          "{0}<a href=\"{1}\">{1}</a>{2}{3}", m.Groups[1].Value, url,
                          puncToPreserve, m.Groups[3]);
                    }
                  )
                );
          }
      @Html.Raw(toOutput)

      if (i < allLines.Length - 1)
      {
        <br />
      }
	  }
  </p>
}
